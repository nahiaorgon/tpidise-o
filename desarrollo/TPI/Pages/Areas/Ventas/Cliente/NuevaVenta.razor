@page "/Ventas/NuevaVenta"
@inject NotificationService NotificationService 
@inherits OwningComponentBase<Usuario> 
@inject NavigationManager NavigationManager
@using Reciplas.Clases;
@using Reciplas.Repositorio;
@inject IRepositorioVentas RepositorioVentas;  


<TituloPrincipal TextoPrincipal="Ventas" TextoSecundario="Clientes" />  
@if (nuevaVenta == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card-body"> 
    <EditForm  Model="@nuevaVenta" OnValidSubmit="@(() => manejoCrearVenta())">
        <DataAnnotationsValidator/>
    <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
            <RadzenColumn Size="12" SizeMD="6">     
                <RadzenStack>
                    <RadzenFieldset Text="Nueva Venta">
                        <RadzenStack Gap="1rem">
                            <RadzenRow AlignItems="AlignItems.Center"> 

                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Cliente" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8"> 
 
                                    <InputText Style="width: 100%;" Name="CardNr" @bind-Value="nuevaVenta.cliente" class="form-control"> </InputText>
                                    <ValidationMessage For="() => nuevaVenta.cliente"></ValidationMessage>

                                </RadzenColumn>  
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Fecha" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8"> 

                                    <InputDate Style="width: 100%;" Name="ExpiryDate"
                                    ShowTime="true" DateFormat="dd/MM/yyyy" @bind-Value="nuevaVenta.fecha"  class="form-control"></InputDate>
                                    <ValidationMessage For="() => nuevaVenta.fecha"></ValidationMessage>


                                </RadzenColumn> 
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenFieldset>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>

        <br>
             
                   <RadzenButton Style="margin-left:15px" Click=@(args => OnClick("Registro Guardado")) Variant="Variant.Flat" Text="Guardar" Icon="check_circle" ButtonStyle="ButtonStyle.Primary"  />
            <a href="/ventas"><RadzenButton Style="margin-left:auto" Click=@(args => OnClick("Registro sin guardar")) Variant="Variant.Flat" Text="Volver" Icon="history" ButtonStyle="ButtonStyle.Light" /></a>
            
 </EditForm> 
  </div> 
}

@code {
    private Ventas nuevaVenta = new Ventas();
    //metodo para guardar
    public async Task manejoCrearVenta(){
        var crearVenta = await RepositorioVentas.CrearVenta(nuevaVenta);
        NavigationManager.NavigateTo("/ventas");
    }


    private void OnClick(string text)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Detail = text });
    }
    

}
